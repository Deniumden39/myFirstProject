`use strict`;

for (let i = 0; i < 3; i++) {
  console.log(i);
  for (let j = 0; j < 3; j++) {
    console.log(j);
  }
}

// *
// **
// ***
// ****
// *****
// ******

let result = ``;
const length = 7;

for (let i = 1; i < length; i++) {
  for (let j = 0; j < i; j++) {
    result += `*`;
  }

  result += `\n`;
}

console.log(result);

first: for (let i = 0; i < 3; i++) {
  console.log(`First level: ${i}`);
  for (let j = 0; j < 3; j++) {
    console.log(`Second level: ${j}`);
    for (let k = 0; k < 3; k++) {
      if (k === 2) console.log(`Third level: ${k}`);
    }
  }
}

–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∫–æ–¥?



console.log( NaN || 2 || undefined );


console.log( NaN && 2 && undefined );


console.log( 1 && 2 && 3 );


console.log( !1 && 2 || !3 );


console.log( 25 || null && !3 );


console.log( NaN || null || !3 || undefined || 5);


console.log( NaN || null && !3 && undefined || 5);


console.log( 5 === 5 && 3 > 1 || 5);

// –ó–∞–¥–∞—á–∏ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
// ______________________________________________________

// –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É—Å–ª–æ–≤–∏–µ?

const hamburger = 3;
const fries = 3;
const cola = 0;
const nuggets = 2;


if (hamburger === 3 && cola || fries === 3 && nuggets) {
   console.log('Done!')
}




// –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É—Å–ª–æ–≤–∏–µ?

let hamburger;
const fries = NaN;
const cola = 0;
const nuggets = 2;


if (hamburger || cola || fries === 3 || nuggets) {
   console.log('Done!')
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è hamburger –∑–∞–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ let, —Ç–∞–∫ –∫–∞–∫ const –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç 
// –∫–∞–∫–æ–µ-–ª–∏–±–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –° const –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.
// –ê –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–º undefined, –Ω–∞–ø–æ–º–∏–Ω–∞—é üôÇ

// –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É—Å–ª–æ–≤–∏–µ?

let hamburger;
const fries = NaN;
const cola = 0;
const nuggets = 2;


if (hamburger && cola || fries === 3 && nuggets) {
   console.log('Done!')

//FUNCTIONS//

let num = 20;

function showFirstMessage(text) {
  console.log(text);
  let num = 10;
  console.log(num);
}

showFirstMessage(`HW!`);
console.log(num);

function calc(a, b) {
  return a + b;
}

console.log(calc(4, 3));
console.log(calc(5, 6));
console.log(calc(10, 3));

function ret() {
  let num = 50;
  //
  //

  ///
  return num;
}

const anotherNum = ret();
console.log(anotherNum);

const logger = function () {
  console.log(`hellow!`);
};

function calc(a, b) {
  return a + b;
}

console.log(calc(4, 3));
console.log(calc(5, 6));
console.log(calc(10, 3));

const calc = (a, b) => {
  return a + b;
};

//CURRENCY RATE

const usdRate = 28;
const eurRate = 32;
const discount = 0.9;

function convert(amount, Rate) {
  return Rate * amount;
}

function promotion(result) {
  console.log(result * discount);
}

promotion(convert(500, usdRate));

convert(500, usdRate);
convert(500, eurRate);

// ===============================================================================================

// Coding Exercise 3: –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –∏ —É—Å–ª–æ–≤–∏–π

// –ó–∞–¥–∞—á–∏:

// Coding Exercise 3: –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –∏ —É—Å–ª–æ–≤–∏–π

// #1
// –ü—Ä–∏ –ø–æ–º–æ—â–∏ —Ü–∏–∫–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 5 –¥–æ 10 –≤ –∫–æ–Ω—Å–æ–ª—å.
// 5 –∏ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –¶–∏–∫–ª –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π

let str = ``;
for (i = 5; i <= 10; i++) {
  str += i;
}
console.log(str);

// #2
// –ü—Ä–∏ –ø–æ–º–æ—â–∏ —Ü–∏–∫–ª–∞ for –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –æ—Ç 20 –¥–æ 10 –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (20, 19, 18...). –ö–æ–≥–¥–∞ —Ü–∏–∫–ª –¥–æ–π–¥–µ—Ç –¥–æ —á–∏—Å–ª–∞ 13 - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Å—å —Ü–∏–∫–ª

let str = ``;
for (i = 20; i >= 10; i--) {
  if (i == 13) {
    break;
  } else {
    str += `${i} `;
  }
}
console.log(str);

// #3
// –ü—Ä–∏ –ø–æ–º–æ—â–∏ —Ü–∏–∫–ª–∞ for –≤—ã–≤–µ–¥–∏—Ç–µ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

let str = ``;
for (i = 2; i <= 10; i++) {
  if (i % 2 === 0) {
    str += `${i} `;
  } else {
    continue;
  }
}
console.log(str);

// #4
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ü–∏–∫–ª  for –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç —Å while. –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ.
// –ù–µ —Å–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª! –ò–Ω–∞—á–µ –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–Ω—É—Ç—å.

//  –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å:

//  for (let i = 2; i <= 16; i++) {
//      if (i % 2 === 0) {
//          continue;
//      } else {
//          console.log(i);
//      }
//  }


let i = 2;
while (i <= 16) {
  if (i % 2 === 0) {
    i++;
    continue;
  } else {
    console.log(i);
    
  }
  i++;
}

// #5
// –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 5 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
// –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∏–º: arr[0]

const arrOfNum = [];
for (i = 5; i <= 10; i++) {
  arrOfNum[i-5]=i;
}
console.log(arrOfNum);



// Coding Exercise 4: (*) –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –∏ —É—Å–ª–æ–≤–∏–π
// ===============================================================================================

// #1
// –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ (result) —á–∏—Å–ª–∞–º–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ (arr). –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –º–æ–∂–Ω–æ 
// –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ arr.length, –∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –æ–±—Ä–∞—â–∞–µ–º—Å—è –≤—Å–µ —Ç–∞–∫ –∂–µ: arr[0], arr[1] –∏ —Ç–¥.
// –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å—Å—è —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –º–∞—Å—Å–∏–≤


function firstTask() {
   
  const arr = [3, 5, 8, 16, 20, 23, 50];
  const result = [];
  for (let i in arr){
    result[i] = arr[i];
  }
  return result;
}
console.log(firstTask());

// —Ä–µ—à–µ–Ω–∏–µ


function firstTask() {
  const arr = [3, 5, 8, 16, 20, 23, 50];
  const result = [];

  for (let i = 0; i < arr.length; i++) {
      result[i] = arr[i];
  }

  console.log(result);
  return result;
}

firstTask();

// ‚Ññ2
// –ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Å–µ —á–∏—Å–ª–∞ –±—ã–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω—ã –≤ 2 —Ä–∞–∑–∞, 
// –∞ –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç—Ä–æ–∫–∞ - —Ç–æ –∫ –Ω–µ–π –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ " - done".
// –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ typeof();
// –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]

function secondTask() {
  const data = [5, 10, 'Shopping', 20, 'Homework'];
  for (let i=0; i<data.length; i++) {
    if (typeof(data[i])==`number`){
      data[i] = data[i] * 2;
    } else {
      data[i] = `${data[i]} - done`;
    }
    
}
  return data;
}
console.log(secondTask());

// Coding Exercise 5: (**) –ó–∞–¥–∞—á–∞ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
// ===============================================================================================

// –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∑–≤–µ–∑–¥–æ—á–µ–∫ (*) –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞—Ä–∏—Å—É–µ—Ç –≤–æ—Ç —Ç–∞–∫—É—é —Ñ–∏–≥—É—Ä—É:

//      *
//     ***
//    *****
//   *******
//  *********
// ***********
// (–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤ –∫–æ–Ω—Ü–µ —Ñ–∏–≥—É—Ä—ã –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ \n, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö. –í –ö–û–ù–¶–ï –ö–ê–ñ–î–û–ô
//   –°–¢–†–û–ö–ò –ù–ï–¢ –ü–†–û–ë–ï–õ–û–í, –¢–û–õ–¨–ö–û –ü–ï–†–ï–ù–û–°)

let result = ``;
const length = 50;
const space = ` `;
const star = `*`;

for (let i = 1; i < length; i++) {
  for (let k = length; k > i; k--) {
    result += space;
  }
  for (let j = 1; j < i + i; j++) {
    result += star;
  }

  result += `\n`;
}

console.log(result);

// –†–µ—à–µ–Ω–∏–µ

const lines = 5;
let result = '';

for (let i = 0; i <= lines; i++) {
    for (let j = 0; j < lines - i; j++) {
        result += " ";
    }
    for (let j = 0; j < 2 * i + 1; j++) {
        result += "*";
    }
    result += "\n";
}

console.log(result)


// ===============================================================================================



//#1//

function sayHello(name) {
  console.log(`–ü—Ä–∏–≤–µ—Ç ${name}!`);
}

sayHello(`–î–µ–Ω–∏—Å`);

//#2//

function returnNeiborNumb(i) {
  for (let j = i - 1; j < i + 2; j++) {
    console.log(j);
  }
}
returnNeiborNumb(5);

function returnNeiborNumb(i) {
  return [i - 1, i, i + 1];
}
returnNeiborNumb(5);

//#3//

function getMathResult(base, iterr) {
  let result = ``;
  if (typeof iterr == `number` && iterr > 0) {
    for (let i = 1; i <= iterr; i++) {
      let space = `---`;
      if (i * base < iterr * base) {
        space = `---`;
      } else {
        space = ``;
      }

      result += `${base * i}${space}`;
    }

    console.log(result);
  } else {
    console.log(base);
  }
}

///////////////Coding Exercise 7: (*) –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π///////////////

// // –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å –æ–±—ä–µ–º –∏ –ø–ª–æ—â–∞–¥—å –ø–æ–ª–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫—É–±–∞
// (—Ç–æ–∂–µ –±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–π).
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã —Ä–µ–±—Ä–∞ –∫—É–±–∞.
// –û—Ç–≤–µ—Ç –≤—ã–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö.

// // –ï—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ø–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É
// "–ü—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

function calculateVolumeAndArea(length) {
  if (typeof length !== `number` || length <= 0) {
    console.log("–ü—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
  } else {
    let cubSquare = length * length * 6;
    let cubVolume = length * length * length;
    console.log(
      `–û–±—ä–µ–º –∫—É–±–∞: ${cubVolume}, –ø–ª–æ—â–∞–¥—å –≤—Å–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: ${cubSquare}`
    );
  }
}
calculateVolumeAndArea(`w`);

// –†–µ—à–µ–Ω–∏–µ
function calculateVolumeAndArea(length) {
  if (typeof length !== "number" || length < 0 || !Number.isInteger(length)) {
    return "–ü—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞";
  }

  let volume = 0,
    area = 0;

  volume = length ** 3;
  // length ** 3 - —ç—Ç–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –≤—ã—à–µ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ü–∏–∫–ª.
  // ** - —ç—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ç–µ–ø–µ–Ω–∏, –Ω–∞–ø–æ–º–∏–Ω–∞—é. –ù–æ –æ–Ω–ª–∞–π–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä –µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç =/
  area = 6 * (length * length);

  return `–û–±—ä–µ–º –∫—É–±–∞: ${volume}, –ø–ª–æ—â–∞–¥—å –≤—Å–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: ${area}`;
}

console.log(calculateVolumeAndArea(5));

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–æ–º–µ—Ä
// –∫—É–ø–µ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –µ–π –Ω–æ–º–µ—Ä—É –º–µ—Å—Ç–∞. –ù–∞–≥–ª—è–¥–Ω–æ

//

function getCoupeNumber(ticketNum) {
  if (
    typeof ticketNum == `number` &&
    ticketNum > 0 &&
    Number.isInteger(ticketNum)
  ) {
    let result = Math.ceil(ticketNum / 4);
    console.log(result);
  } else {
    if (ticketNum > 36 || ticketNum == 0) {
      console.log(`–¢–∞–∫–∏—Ö –º–µ—Å—Ç –≤ –≤–∞–≥–æ–Ω–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    } else {
      console.log(`–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–µ—Å—Ç–∞`);
    }
  }
}
getCoupeNumber(0);

// –†–µ—à–µ–Ω–∏–µ
function getCoupeNumber(seatNumber) {
  if (
    typeof seatNumber !== "number" ||
    seatNumber < 0 ||
    !Number.isInteger(seatNumber)
  ) {
    return "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –º–µ—Å—Ç–∞";
  }

  if (seatNumber === 0 || seatNumber > 36) {
    return "–¢–∞–∫–∏—Ö –º–µ—Å—Ç –≤ –≤–∞–≥–æ–Ω–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
  }

  return Math.ceil(seatNumber / 4);
  // —Ç—É—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã—Ö :)
}

console.log(getCoupeNumber(33));

///////////////Coding Exercise 8: (*) –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π///////////////
//  #1 –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏.
// (–°–º–æ—Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä). –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–ª–æ–≤–∞ "—á–∞—Å" - –æ–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–∏—Ñ—Ä—ã.
// –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ —á–∏—Å–ª–æ, –¥—Ä–æ–±–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
// "–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ"
// // –í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –º–∞–∫—Å–∏–º—É–º 600—é –º–∏–Ω—É—Ç–∞–º–∏ (10 —á–∞—Å–æ–≤).
// –¢–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –±—É–¥—É—Ç —Ä–∞–∑–¥—É–≤–∞—Ç—å –∫–æ–¥ (33 —á–∞—Å–∞, 31 —á–∞—Å, 11 —á–∞—Å–æ–≤ –∏ —Ç–¥).
// –≠—Ç–æ–≥–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏ –∫–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (1 - 10 —á–∞—Å–æ–≤).
// –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏ –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –æ–Ω —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã.
// –ü—Ä–∏–º–µ—Ä:
// getTimeFromMinutes(150) => "–≠—Ç–æ 2 —á–∞—Å–∞ –∏ 30 –º–∏–Ω—É—Ç"
// getTimeFromMinutes(50) => "–≠—Ç–æ 0 —á–∞—Å–æ–≤ –∏ 50 –º–∏–Ω—É—Ç"
// getTimeFromMinutes(0) => "–≠—Ç–æ 0 —á–∞—Å–æ–≤ –∏ 0 –º–∏–Ω—É—Ç"
// getTimeFromMinutes(-150) => "–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ"

function getTimeFromMinutes(minutesNum) {
  if (
    typeof minutesNum !== "number" ||
    minutesNum < 0 ||
    !Number.isInteger(minutesNum)
  ) {
    return "–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ";
  }
  let hrs = 0;
  mnts = 0;
  hrs = Math.floor(minutesNum / 60);
  mnts = Math.round((minutesNum / 60 - hrs) * 60);

  if (hrs > 4 || hrs == 0) {
    return `–≠—Ç–æ ${hrs} —á–∞—Å–æ–≤ –∏ ${mnts} –º–∏–Ω—É—Ç`;
  }
  if (hrs == 1) {
    return `–≠—Ç–æ ${hrs} —á–∞—Å –∏ ${mnts} –º–∏–Ω—É—Ç`;
  }
  return `–≠—Ç–æ ${hrs} —á–∞—Å–∞ –∏ ${mnts} –º–∏–Ω—É—Ç`;
}
console.log(getTimeFromMinutes(523));

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è switch (—Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–π –∫–æ–¥ –≤—ã–¥–µ–ª–µ–Ω):

// let a = 2 + 2;

// switch (a) {
//   case 3:
//     alert( '–ú–∞–ª–æ–≤–∞—Ç–æ' );
//     break;
//   case 4:
//     alert( '–í —Ç–æ—á–∫—É!' );
//     break;
//   case 5:
//     alert( '–ü–µ—Ä–µ–±–æ—Ä' );
//     break;
//   default:
//     alert( "–ù–µ—Ç —Ç–∞–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π" );
// }
// –ó–¥–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä switch –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç a —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–∑ case.

// #2 –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è 4 —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –±–æ–ª—å—à–µ–µ –∏–∑ –Ω–∏—Ö.
// –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 4 - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 0.
// –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.
// –ü—Ä–∏–º–µ—Ä:
// findMaxNumber(1, 5, 6.6, 11); =>  11
// findMaxNumber(1, 5, '6', '10');  =>  0

function findMaxNumber(a, b, c, d) {
  if (typeof (a + b + c + d) !== "number" || a * b * c * d == 0) {
    return 0;
  }

  return Math.max(a, b, c, d);
}
console.log(findMaxNumber(1, 5, 6.6, 11));

// (**) –ó–∞–¥–∞—á–∞ —Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –Ω–∞ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏!!!!!!!
// ---------------------------------------------

// –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–µ–±—è –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç-—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
// –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤—ã–≤–µ–¥–µ–Ω—ã —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏.
// –ü—Ä–∏—á–µ–º, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É.

// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —á–∏—Å–ª–æ - –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –†–µ—à–∞—Ç—å –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏.

// –ü—Ä–∏–º–µ—Ä:
// fib(4) => ''0 1 1 2"
// fib(7) => ''0 1 1 2 3 5 8"
// fib('7') => ''"
// fib(1) => "0"
// fib(0) => ''"

function fib(fibNum) {
  let strFib = ``;
  let a = 0;
  b = 1;
  firstNum = 0;
  secNum = 1;
  if (typeof fibNum !== "number" || fibNum <= 0 || !Number.isInteger(fibNum)) {
    return "";
  }
  if (fibNum === 1) {
    return firstNum;
  }
  if (fibNum === 2) {
    return `${firstNum} ${secNum}`;
  }
  for (i = 0; i <= fibNum; i++) {
    c = a + b;
    a = b;
    b = c;
    strFib += `${b} `;
  }

  return `0 1 ${strFib}`;
}
console.log(fib(1));

// Coding Exercise 10: –ó–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
// ---------------------------------------------

// ‚Ññ1
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é showExperience, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤
// —Å–µ–±—è –æ–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ–ø—ã—Ç–æ–º.

// –ü—Ä–∏–º–µ—Ä:

// showExperience(personalPlanPeter) => '1 month'

const personalPlanPeter = {
  name: "Peter",
  age: "29",
  skills: {
    languages: ["ru", "eng"],
    programmingLangs: {
      js: "20%",
      php: "10%",
    },
    exp: "1 month",
  },
};

function showExperience(personalPlanPeter) {
  const { exp } = personalPlanPeter.skills;
  return exp;
}
console.log(showExperience(personalPlanPeter));

// ‚Ññ2
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é showProgrammingLangs, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–µ–±—è –æ–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏
// –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º –≤–∏–¥–µ.

// –ü—Ä–∏–º–µ—Ä:

// showProgrammingLangs(personalPlanPeter)  =>

// "–Ø–∑—ã–∫ js –∏–∑—É—á–µ–Ω –Ω–∞ 20% –Ø–∑—ã–∫ php –∏–∑—É—á–µ–Ω –Ω–∞ 10%"

// –ü—Ä–∏—á–µ–º —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–∑—ã–∫–æ–≤.
// –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
// P.S. –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è \n –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏.

const personalPlanPeter = {
  name: "Peter",
  age: "29",
  skills: {
    languages: ["ru", "eng"],
    programmingLangs: {
      js: "20%",
      php: "10%",
    },
    exp: "1 month",
  },
};

function showProgrammingLangs(personalPlanPeter) {
  let str = "";
  const { programmingLangs } = personalPlanPeter.skills;
  for (let key in programmingLangs) {
    str += `–Ø–∑—ã–∫ ${key} –∏–∑—É—á–µ–Ω –Ω–∞ ${programmingLangs[key]}\n`;
  }

  return str;
}

console.log(showProgrammingLangs(personalPlanPeter));

console.log(showExperience(personalPlanPeter));

// –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥ showAgeAndLangs –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ personalPlanPeter.
// –ü—Ä–∏ –µ–≥–æ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–µ–±—è –æ–±—ä–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º –≤–∏–¥–µ.
// –ü—Ä–∏–º–µ—Ä:
// personalPlanPeter.showAgeAndLangs(personalPlanPeter)
// => '–ú–Ω–µ 29 –∏ —è –≤–ª–∞–¥–µ—é —è–∑—ã–∫–∞–º–∏: RU ENG'
// –ó–∞–º–µ—Ç—å—Ç–µ, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –∏ —è–∑—ã–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞, –∞ —è–∑—ã–∫–∏ –≤—Å–µ–≥–¥–∞ –≤
// –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏). –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ–º–µ–Ω—è—é—Ç—Å—è, —Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.

const personalPlanPeter = {
  name: "Peter",
  age: "29",
  skills: {
    languages: ["ru", "eng"],
    programmingLangs: {
      js: "20%",
      php: "10%",
    },
    exp: "1 month",
  },
  showAgeAndLangs: function (personalPlanPeter) {
    let str = ``;
    const { age } = personalPlanPeter;
    const { languages } = personalPlanPeter.skills;
    str = `–ú–Ω–µ ${age} –∏ —è –≤–ª–∞–¥–µ—é —è–∑—ã–∫–∞–º–∏: `;

    languages.forEach(function (lang) {
      str += `${lang.toUpperCase()} `;
    });

    return str;
  },
};
console.log(personalPlanPeter.showAgeAndLangs(personalPlanPeter));

// Coding Exercise 11+12: –ó–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –º–∞—Å—Å–∏–≤–∞–º–∏
// ---------------------------------------------
// ‚Ññ1
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é showFamily, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–µ–±—è –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏
// –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

// showFamily(family)  => '–°–µ–º—å—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑: Peter Ann Alex Linda'

// –ò–º–µ–Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞. –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, —Ç–æ
// –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ '–°–µ–º—å—è –ø—É—Å—Ç–∞'

const family = [`Peter`, `Ann`, `Alex`, `Linda`];

function showFamily(family) {
  let str = ``;
  if (family.length == 0) {
    str += `–°–µ–º—å—è –ø—É—Å—Ç–∞`;
  } else {
    str += `–°–µ–º—å—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑: ${family.join(`, `)}`;
    return str;
  }
}

console.log(showFamily(family));

// #2
// –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é standardizeStrings, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ —Å–µ–±—è –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏ –±—É–¥–µ—Ç
// –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.

// –ü—Ä–∏–º–µ—Ä:

// standardizeStrings(favoriteCities)  –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

// lisbon
// rome
// milan
// dublin
// –≠—Ç–æ —á–∞—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–º –º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Å–∞–º—ã—Ö
// —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö. –í —Ç–æ–º —á–∏—Å–ª–µ –∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ :) –ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤
// –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

const favoriteCities = [`Lisbon`, `rOme`, `MILAN`, `duBLin`];

function standardizeStrings(favoriteCities) {
  let str = ``;
  for (let key in favoriteCities) {
    str += `${favoriteCities[key].toLowerCase()}\n`;
  }
  return str;
}

console.log(standardizeStrings(favoriteCities));

// –†–µ—à–µ–Ω–∏–µ

const favoriteCities = ["liSBon", "ROME", "miLan", "Dublin"];

function standardizeStrings(arr) {
  arr.forEach((city) => {
    console.log(city.toLowerCase());
  });
}

standardizeStrings(favoriteCities);

// #3
// –ó–∞–¥–∞—á–∞ —Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é reverse,
// –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

// –ü—Ä–∏–º–µ—Ä:

// const someString = 'This is some strange string';
// reverse(someString) => 'gnirts egnarts emos si sihT'

// –§—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–µ.
// –ï—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ —Å—Ç—Ä–æ–∫–∞ - –≤–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—à–∏–±–∫–∞!"

const someString = "This is some strange string";

function reverse(someString) {
  return someString.split(``).reverse().join(``);
}

console.log(reverse(someString));

// –†–µ—à–µ–Ω–∏–µ

const someString = "This is some strange string";

function reverse(str) {
  if (typeof str !== "string") {
    return "–û—à–∏–±–∫–∞!";
  }
  // –°–∞–º—ã–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è
  return str.split("").reverse().join("");

  // –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ü–∏–∫–ª–∞
  // let newStr = '';
  // for (let i = str.length - 1; i >= 0; i--) {
  //     newStr += str[i];
  // }
  // return newStr
}

console.log(reverse(someString));

// ‚Ññ4
//  –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ç–∞–∫—É—é —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é. –£ –≤–∞—Å –µ—Å—Ç—å –±–∞–Ω–∫–æ–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç –¥–µ–Ω—å–≥–∏
// –∏–∑ –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö. –û–¥–∏–Ω –±–∞–Ω–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å –±–∞–∑–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏,
// –≤—Ç–æ—Ä–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å –ø—Ä–æ—á–∏–º–∏ –≤–∞–ª—é—Ç–∞–º–∏:

// const baseCurrencies = ['USD', 'EUR'];
// const additionalCurrencies = ['UAH', 'RUB', 'CNY'];
// –í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –±–∞–Ω–∫–æ–º–∞—Ç–∞ availableCurr, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞
// –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –ø–µ—Ä–≤—ã–π - —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏ –∏–∑ –¥–≤—É—Ö –±–∞–Ω–∫–æ–≤ —Å—Ä–∞–∑—É
// (—Å–µ–π—á–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è), –≤—Ç–æ—Ä–æ–π - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç,
// –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —Å–µ–π—á–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ.
// –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –≤ –ø–µ—Ä–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ –ø—É—Å—Ç–æ–π - —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç'.
// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º –≤–∏–¥–µ.

// –ü—Ä–∏–º–µ—Ä:

// availableCurr(['UAH', 'RUB', 'CNY'], 'CNY')
// –í–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É:

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:
// UAH
// RUB
// –ó–∞–º–µ—Ç—å—Ç–µ:

// - CNY (—é–∞–Ω—å) –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç, –∑–Ω–∞—á–∏—Ç —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
// - –ü–æ—Å–ª–µ –≤–∞–ª—é—Ç—ã: —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ \n, –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã —Ç–æ–∂–µ.
// –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
// - –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—Ä–∞–∑—É –∏–∑ –¥–≤—É—Ö –±–∞–Ω–∫–æ–≤,
// –ø—Ä–∏—á–µ–º —Å–Ω–∞—á–∞–ª–∞ baseCurrencies, –ø–æ—Ç–æ–º additionalCurrencies –ø–æ –ø–æ—Ä—è–¥–∫—É

const baseCurrencies = ["USD", "EUR"];
const additionalCurrencies = ["UAH", "RUB", "CNY"];
const allCurr = [...baseCurrencies, ...additionalCurrencies];
// const nilCurr = ["UAH"];

function availableCurr(allCurr, nilCurr) {
  let str = "";
  if (allCurr.length === 0) {
    str = `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç`;
  } else {
    for (let key in allCurr) {
      if (allCurr[key] == nilCurr) {
        continue;
      } else {
        // str += `\n`;
        str += `\n${allCurr[key]}`;
      }
    }
  }

  return str;
}

console.log(availableCurr(allCurr, `UAH`));

// –†–µ—à–µ–Ω–∏–µ

const baseCurrencies = ["USD", "EUR"];
const additionalCurrencies = ["UAH", "RUB", "CNY"];

function availableCurr(arr, missingCurr) {
  let str = "";
  arr.length === 0
    ? (str = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç")
    : (str = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n");

  arr.forEach(function (curr, i) {
    if (curr !== missingCurr) {
      str += `${curr}\n`;
    }
  });

  // –ò–ª–∏
  // for (let i = 0; i < arr.length; i++) {
  //     if (arr[i] === missingCurr) {
  //         continue;
  //     }
  //     str += `${arr[i]}\n`;
  // }

  return str;
}

availableCurr([...baseCurrencies, ...additionalCurrencies], "CNY");

// Coding Exercise 13: (*) –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –º–∞—Å—Å–∏–≤–∞–º–∏
// ================================================================================================
// ‚Ññ1
// –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ–±—ä–µ–∫—Ç–µ
// shoppingMallData. –û–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö, –≥–¥–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏–Ω–∞ –∏
// —à–∏—Ä–∏–Ω–∞ –ø–æ–º–µ—â–µ–Ω–∏—è; –≤—ã—Å–æ—Ç—É –ø–æ–º–µ—â–µ–Ω–∏—è; —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∑–∞ 1 –∫—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä –∏
// –±—é–¥–∂–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü.

// –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - —ç—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é isBudgetEnough, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É.
// –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç–∞ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ - –≤—ã–≤–æ–¥–∏—Ç—Å—è
// '–ë—é–¥–∂–µ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', –µ—Å–ª–∏ –Ω–µ—Ç - '–ë—é–¥–∂–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'.

// –ù–æ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∑–∞–¥–∞—á –≤–Ω—É—Ç—Ä–∏:

// - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ –¥–ª–∏–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞, —É–º–Ω–æ–∂–µ–Ω–Ω–∞—è –Ω–∞ –µ–≥–æ —à–∏—Ä–∏–Ω—É;
// - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–∞ –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö;
// - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–º–∞;
// - –≤—Å–µ —á–∏—Å–ª–∞ –∏–¥—É—Ç –±–µ–∑ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã –∏ –≤—Å–µ;
// - —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≤—ã—Å–æ—Ç–∞,
//   –±—é–¥–∂–µ—Ç –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–æ–±—â–µ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç.

const shoppingMallData = {
  shops: [
    {
      wid: 10,
      leng: 5,
    },
    {
      wid: 15,
      leng: 7,
    },
    {
      wid: 20,
      leng: 5,
    },
    {
      wid: 8,
      leng: 10,
    },
  ],
  height: 5,
  moneyPer1m3: 30,
  budget: 50000,
};


function isBudgetEnough(data) {
  let ttlSq = 0;
  let ttlBudget = 0;

  data.shops.forEach(shops => {
    ttlSq += shops.wid * shops.leng;
  });


  ttlBudget = ttlSq * data.moneyPer1m3*data.height
  
  if(ttlBudget>=data.budget){
return `–ë—é–¥–∂–µ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: ${ttlSq}, –±—é–¥–∂–µ—Ç: ${ttlBudget}.`;

  }else{
    return `–ë—é–¥–∂–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: ${ttlSq}, –±—é–¥–∂–µ—Ç: ${ttlBudget}.`;
  } 
}

console.log(isBudgetEnough(shoppingMallData));

// Coding Exercise 14: (*) –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –º–∞—Å—Å–∏–≤–∞–º–∏
// ---------------------------------------------–ù –ï  –í –´ –ü  –û –õ –ù –ï –ù –ê!!!!!!!!!!!!!!!!!!!!
// ‚Ññ2
// –£ –≤–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É:

// const students = ['Peter', 'Andrew', 'Ann', 'Mark', 'Josh', 'Sandra', 'Cris', 'Bernard', 'Takesi', 'Sam'];
// –ù–æ –∫–æ–º–∞–Ω–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 3 –ø–æ 3 —á–µ–ª–æ–≤–µ–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sortStudentsByGroups,
// –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.

// –í–Ω—É—Ç—Ä–∏ –æ–Ω–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É. –ó–∞—Ç–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ 3 —á–µ–ª–æ–≤–µ–∫–∞
// –≤ 3 –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É. –≠—Ç–∏ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–∞–º–∏. –ö–∞–∫ –∏—Ç–æ–≥, —Ñ—É–Ω–∫—Ü–∏—è
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —Ç—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Å—Ç—Ä–æ–∫–æ–π –∫–∞–∫ 4–π —ç–ª–µ–º–µ–Ω—Ç.

// –ü—Ä–∏–º–µ—Ä:

// sortStudentsByGroups(students)  =>

// [
//   [ 'Andrew', 'Ann', 'Bernard' ],
//   [ 'Cris', 'Josh', 'Mark' ],
//   [ 'Peter', 'Sam', 'Sandra' ],
//   '–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã: Takesi'
// ]
// –ï—Å–ª–∏ —É–±—Ä–∞—Ç—å –æ–¥–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç:

// [
//   [ 'Andrew', 'Ann', 'Bernard' ],
//   [ 'Cris', 'Josh', 'Mark' ],
//   [ 'Peter', 'Sam', 'Sandra' ],
//   '–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã: -'
// ]
// –ê –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ, —Ç–æ:

// [
//   [ 'Andrew', 'Ann', 'Bernard' ],
//   [ 'Cris', 'Josh', 'Mark' ],
//   [ 'Peter', 'Sam', 'Sandra' ],
//   '–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã: Takesi, Somebody'
// ]
// –¢–æ –µ—Å—Ç—å, –º–µ–Ω—è–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏. –í—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É—á–µ–Ω–∏–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç —Ç—É–¥–∞.

const students = [
  "Peter",
  "Andrew",
  "Ann",
  "Mark",
  "Josh",
  "Sandra",
  "Cris",
  "Bernard",
  "Takesi",
  "Sam",
];

function sortStudentsByGroups(arr) {
  sortAlphStudents = students.sort();
  let size = 3; //—Ä–∞–∑–º–µ—Ä –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
  let studentsGroup = []; //–º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
  for (let i = 0; i < Math.ceil(sortAlphStudents.length / size); i++) {
    studentsGroup[i] = sortAlphStudents.slice(i * size, i * size + size);
    if (studentsGroup[i].length == size) {
      studentsGroup[i];
    } else {
      studentsGroup[i] = `–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã: ${sortAlphStudents.slice(
        i * size,
        i * size + size
      )}`;
    }
  }
  console.log(studentsGroup);
}
sortStudentsByGroups(students);

// –†–µ—à–µ–Ω–∏–µ
function sortStudentsByGroups(arr) {
  arr.sort();
  const a = [],
    b = [],
    c = [],
    rest = [];

  for (let i = 0; i < arr.length; i++) {
    if (i < 3) {
      a.push(arr[i]);
    } else if (i < 6) {
      b.push(arr[i]);
    } else if (i < 9) {
      c.push(arr[i]);
    } else {
      rest.push(arr[i]);
    }
  }
  return [
    a,
    b,
    c,
    `–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã: ${rest.length === 0 ? "-" : rest.join(", ")}`,
  ];
}

sortStudentsByGroups(students);
